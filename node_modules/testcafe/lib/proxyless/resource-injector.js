"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const testcafe_hammerhead_1 = require("testcafe-hammerhead");
const connection_1 = __importDefault(require("../browser/connection"));
const injectables_1 = require("../assets/injectables");
const empty_page_markup_1 = __importDefault(require("./empty-page-markup"));
const lodash_1 = require("lodash");
const http_status_codes_1 = require("http-status-codes");
const test_run_1 = require("../errors/test-run");
const cdp_1 = require("./utils/cdp");
const debug_loggers_1 = require("../utils/debug-loggers");
const string_1 = require("./utils/string");
const safe_api_1 = require("./request-pipeline/safe-api");
const CONTENT_SECURITY_POLICY_HEADER_NAMES = [
    'content-security-policy',
    'content-security-policy-report-only',
];
class ResourceInjector {
    constructor(browserId, specialServiceRoutes) {
        this._browserId = browserId;
        this._specialServiceRoutes = specialServiceRoutes;
    }
    async _prepareInjectableResources(isIframe) {
        const browserConnection = connection_1.default.getById(this._browserId);
        const proxy = browserConnection.browserConnectionGateway.proxy;
        const windowId = browserConnection.activeWindowId;
        const currentTestRun = browserConnection.getCurrentTestRun();
        if (!currentTestRun)
            return null;
        const taskScript = await currentTestRun.session.getTaskScript({
            referer: '',
            cookieUrl: '',
            withPayload: true,
            serverInfo: proxy.server1Info,
            windowId,
            isIframe,
        });
        const injectableResources = {
            stylesheets: [
                injectables_1.TESTCAFE_UI_STYLES,
            ],
            scripts: [
                ...testcafe_hammerhead_1.INJECTABLE_SCRIPTS.map(hs => (0, testcafe_hammerhead_1.getAssetPath)(hs, proxy.options.developmentMode)),
                ...injectables_1.SCRIPTS.map(s => (0, testcafe_hammerhead_1.getAssetPath)(s, proxy.options.developmentMode)),
            ],
            embeddedScripts: [taskScript],
        };
        injectableResources.scripts = injectableResources.scripts.map(script => proxy.resolveRelativeServiceUrl(script));
        injectableResources.stylesheets = injectableResources.stylesheets.map(style => proxy.resolveRelativeServiceUrl(style));
        return injectableResources;
    }
    _processResponseHeaders(headers) {
        if (!headers)
            return [];
        (0, lodash_1.remove)(headers, header => CONTENT_SECURITY_POLICY_HEADER_NAMES.includes(header.name.toLowerCase()));
        return (0, string_1.stringifyHeaderValues)(headers);
    }
    async redirectToErrorPage(client, err, url) {
        const browserConnection = connection_1.default.getById(this._browserId);
        const currentTestRun = browserConnection.getCurrentTestRun();
        if (!currentTestRun)
            return;
        currentTestRun.pendingPageError = new test_run_1.PageLoadError(err, url);
        await (0, cdp_1.navigateTo)(client, this._specialServiceRoutes.errorPage1);
    }
    async getDocumentResourceInfo(event, client) {
        const { requestId, request, responseErrorReason, resourceType, } = event;
        if (resourceType !== 'Document') {
            return {
                error: null,
                body: null,
            };
        }
        try {
            if (responseErrorReason === 'NameNotResolved') {
                const err = new Error(`Failed to find a DNS-record for the resource at "${event.request.url}"`);
                return {
                    error: err,
                    body: null,
                };
            }
            const responseObj = await client.Fetch.getResponseBody({ requestId });
            const responseStr = (0, string_1.getResponseAsString)(responseObj);
            return {
                error: null,
                body: Buffer.from(responseStr),
            };
        }
        catch (err) {
            (0, debug_loggers_1.resourceInjectorLogger)('Failed to process request: %s', request.url);
            return {
                error: err,
                body: null,
            };
        }
    }
    async processAboutBlankPage(event, client) {
        (0, debug_loggers_1.resourceInjectorLogger)('Handle page as about:blank. Origin url: %s', event.frame.url);
        const injectableResources = await this._prepareInjectableResources(false);
        const html = (0, testcafe_hammerhead_1.injectResources)(empty_page_markup_1.default, injectableResources);
        await client.Page.setDocumentContent({
            frameId: event.frame.id,
            html,
        });
    }
    async processHTMLPageContent(fulfillRequestInfo, isIframe, client) {
        const injectableResources = await this._prepareInjectableResources(isIframe);
        // NOTE: an unhandled exception interrupts the test execution,
        // and we are force to redirect manually to the idle page.
        if (!injectableResources)
            await (0, cdp_1.redirect)(client, fulfillRequestInfo.requestId, this._specialServiceRoutes.idlePage);
        else {
            const updatedResponseStr = (0, testcafe_hammerhead_1.injectResources)(fulfillRequestInfo.body, injectableResources);
            await (0, safe_api_1.safeFulfillRequest)(client, {
                requestId: fulfillRequestInfo.requestId,
                responseCode: fulfillRequestInfo.responseCode || http_status_codes_1.StatusCodes.OK,
                responseHeaders: this._processResponseHeaders(fulfillRequestInfo.responseHeaders),
                body: (0, string_1.toBase64String)(updatedResponseStr),
            });
        }
    }
    async processNonProxiedContent(fulfillRequestInfo, client) {
        await (0, safe_api_1.safeFulfillRequest)(client, {
            requestId: fulfillRequestInfo.requestId,
            responseCode: fulfillRequestInfo.responseCode || http_status_codes_1.StatusCodes.OK,
            responseHeaders: this._processResponseHeaders(fulfillRequestInfo.responseHeaders),
            body: (0, string_1.toBase64String)(fulfillRequestInfo.body),
        });
    }
}
exports.default = ResourceInjector;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,