"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const event_provider_1 = __importDefault(require("../request-hooks/event-provider"));
const resource_injector_1 = __importDefault(require("../resource-injector"));
const headers_1 = require("../utils/headers");
const cdp_1 = require("../utils/cdp");
const connection_1 = __importDefault(require("../../browser/connection"));
const error_route_1 = __importDefault(require("../error-route"));
const debug_loggers_1 = require("../../utils/debug-loggers");
const testcafe_hammerhead_1 = require("testcafe-hammerhead");
const default_setup_options_1 = __importDefault(require("../default-setup-options"));
const special_handlers_1 = __importDefault(require("./special-handlers"));
const safe_api_1 = require("./safe-api");
class ProxylessRequestPipeline {
    constructor(browserId, client) {
        this._client = client;
        this._specialServiceRoutes = this._getSpecialServiceRoutes(browserId);
        this.requestHookEventProvider = new event_provider_1.default(browserId);
        this._resourceInjector = new resource_injector_1.default(browserId, this._specialServiceRoutes);
        this._options = default_setup_options_1.default;
        this._stopped = false;
        this._currentFrameTree = null;
    }
    _getSpecialServiceRoutes(browserId) {
        const browserConnection = connection_1.default.getById(browserId);
        const proxy = browserConnection.browserConnectionGateway.proxy;
        return {
            errorPage1: proxy.resolveRelativeServiceUrl(error_route_1.default, proxy.server1Info.domain),
            errorPage2: proxy.resolveRelativeServiceUrl(error_route_1.default, proxy.server2Info.domain),
            idlePage: browserConnection.idleUrl,
            openFileProtocolUrl: browserConnection.openFileProtocolUrl,
        };
    }
    async _handleMockErrorIfNecessary(pipelineContext, event) {
        if (!pipelineContext.mock.hasError)
            return;
        await pipelineContext.handleMockError(this.requestHookEventProvider);
        (0, debug_loggers_1.requestPipelineMockLogger)('%s\n%s', event.networkId, pipelineContext.mock.error);
    }
    async _handleMockResponse(mockedResponse, pipelineContext, event) {
        const mockedResponseBodyStr = mockedResponse.getBody().toString();
        const fulfillInfo = {
            requestId: event.requestId,
            responseCode: mockedResponse.statusCode,
            responseHeaders: (0, headers_1.convertToHeaderEntries)(mockedResponse.headers),
            body: mockedResponseBodyStr,
        };
        if (pipelineContext.reqOpts.isAjax)
            await this._resourceInjector.processNonProxiedContent(fulfillInfo, this._client);
        else
            await this._resourceInjector.processHTMLPageContent(fulfillInfo, false, this._client);
        (0, debug_loggers_1.requestPipelineMockLogger)(`Mock request ${event.requestId}`);
    }
    _createContinueResponseRequest(event, modified) {
        const continueResponseRequest = {
            requestId: event.requestId,
        };
        if (modified) {
            continueResponseRequest.responseHeaders = event.responseHeaders;
            continueResponseRequest.responseCode = event.responseStatusCode;
        }
        return continueResponseRequest;
    }
    _shouldRedirectToErrorPage(event) {
        return event.resourceType === 'Document'
            && !this._isIframe(event.frameId);
    }
    async _handleOtherRequests(event) {
        (0, debug_loggers_1.requestPipelineOtherRequestLogger)('%r', event);
        if ((0, cdp_1.isRequest)(event)) {
            await this.requestHookEventProvider.onRequest(event);
            const pipelineContext = this.requestHookEventProvider.getPipelineContext(event.networkId);
            if (!pipelineContext || !pipelineContext.mock)
                await this._client.Fetch.continueRequest({ requestId: event.requestId });
            else {
                const mockedResponse = await pipelineContext.getMockResponse();
                await this._handleMockErrorIfNecessary(pipelineContext, event);
                const mockedResponseEvent = (0, cdp_1.createRequestPausedEventForResponse)(mockedResponse, event);
                await this.requestHookEventProvider.onResponse(mockedResponseEvent, mockedResponse.getBody(), this._client);
                await this._handleMockResponse(mockedResponse, pipelineContext, event);
            }
        }
        else {
            const resourceInfo = await this._resourceInjector.getDocumentResourceInfo(event, this._client);
            if (resourceInfo.error) {
                if (this._shouldRedirectToErrorPage(event))
                    await this._resourceInjector.redirectToErrorPage(this._client, resourceInfo.error, event.request.url);
                return;
            }
            const modified = await this.requestHookEventProvider.onResponse(event, resourceInfo.body, this._client);
            if (event.resourceType !== 'Document') {
                const continueResponseRequest = this._createContinueResponseRequest(event, modified);
                await (0, safe_api_1.safeContinueResponse)(this._client, continueResponseRequest);
            }
            else {
                await this._resourceInjector.processHTMLPageContent({
                    requestId: event.requestId,
                    responseHeaders: event.responseHeaders,
                    responseCode: event.responseStatusCode,
                    body: resourceInfo.body.toString(),
                }, this._isIframe(event.frameId), this._client);
            }
        }
    }
    _topFrameNavigation(event) {
        return event.type === 'Navigation'
            && !event.frame.parentId;
    }
    async _updateCurrentFrameTree() {
        // NOTE: Due to CDP restrictions (it hangs), we can't get the frame tree
        // right before injecting service scripts.
        // So, we are forced tracking frames tree.
        const result = await this._client.Page.getFrameTree();
        this._currentFrameTree = result.frameTree;
    }
    _isIframe(frameId) {
        if (!this._currentFrameTree)
            return false;
        return this._currentFrameTree.frame.id !== frameId;
    }
    init(options) {
        this._options = options;
        this._client.Fetch.on('requestPaused', async (event) => {
            if (this._stopped)
                return;
            const specialRequestHandler = (0, special_handlers_1.default)(event, this._options, this._specialServiceRoutes);
            if (specialRequestHandler)
                await specialRequestHandler(event, this._client, this._options);
            else
                await this._handleOtherRequests(event);
        });
        this._client.Page.on('frameNavigated', async (event) => {
            (0, debug_loggers_1.requestPipelineLogger)('%f', event);
            if (!this._topFrameNavigation(event)
                || event.frame.url !== testcafe_hammerhead_1.SPECIAL_BLANK_PAGE)
                return;
            await this._resourceInjector.processAboutBlankPage(event, this._client);
        });
        this._client.Page.on('frameStartedLoading', async () => {
            await this._updateCurrentFrameTree();
        });
        this._client.Network.on('loadingFailed', async (event) => {
            (0, debug_loggers_1.requestPipelineLogger)('%l', event);
            if (event.requestId)
                this.requestHookEventProvider.cleanUp(event.requestId);
        });
    }
    stop() {
        this._stopped = true;
    }
}
exports.default = ProxylessRequestPipeline;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,